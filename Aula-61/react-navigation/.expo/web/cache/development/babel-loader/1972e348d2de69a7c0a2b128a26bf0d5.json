{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\allan.farias1\\\\Documents\\\\entra21-allan-farias\\\\Aula-61\\\\react-navigation\\\\screens\\\\DrawerScreens\\\\UseStateScreen.js\";\nimport React, { useState } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nexport function UseStateScreen(_ref) {\n  var _ref$contagemInicial = _ref.contagemInicial,\n      contagemInicial = _ref$contagemInicial === void 0 ? 0 : _ref$contagemInicial;\n\n  var _useState = useState(contagemInicial),\n      _useState2 = _slicedToArray(_useState, 2),\n      count = _useState2[0],\n      setCount = _useState2[1];\n\n  return React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 24,\n      margin: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }\n  }, \"\\xC9 usado para declarar uma vari\\xE1vel state, o \\xFAnico argumento usado \\xE9 o state inicial. E ela sempre ir\\xE1 retornar um par de valores sendo eles o state atual e uma fun\\xE7\\xE3o para atualizar o state\"), React.createElement(Text, {\n    style: {\n      fontSize: 20,\n      padding: 5,\n      marginLeft: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }\n  }, \"Count: \", count), React.createElement(Text, {\n    style: {\n      marginLeft: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, React.createElement(\"button\", {\n    onClick: function onClick() {\n      return setCount(contagemInicial);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }\n  }, \"Reset\"), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return setCount(function (prevCount) {\n        return prevCount - 1;\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }\n  }, \"-\"), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return setCount(function (prevCount) {\n        return prevCount + 1;\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }\n  }, \"+\")), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }\n  }), \"Use o useState caso: A) JavaScript primitivos como estado B) transi\\xE7\\xF5es simples de estado C) l\\xF3gica de neg\\xF3cios dentro do seu componente D) diferentes propriedades que n\\xE3o mudam de forma correlata e podem ser gerenciadas por ganchos de uso m\\xFAltiplos E) estado co-localizado ao seu componente F) uma pequena aplica\\xE7\\xE3o (mas as linhas est\\xE3o emba\\xE7adas aqui)\"));\n}","map":{"version":3,"sources":["C:/Users/allan.farias1/Documents/entra21-allan-farias/Aula-61/react-navigation/screens/DrawerScreens/UseStateScreen.js"],"names":["React","useState","UseStateScreen","contagemInicial","count","setCount","fontSize","margin","padding","marginLeft","prevCount"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAGA,OAAO,SAASC,cAAT,OAAiD;AAAA,kCAAvBC,eAAuB;AAAA,MAAvBA,eAAuB,qCAAL,CAAK;;AACpD,kBAA0BF,QAAQ,CAACE,eAAD,CAAlC;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AAEA,SACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE,EAAZ;AAAgBC,MAAAA,MAAM,EAAE;AAAxB,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0NADJ,EAKI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAED,MAAAA,QAAQ,EAAE,EAAZ;AAAgBE,MAAAA,OAAO,EAAE,CAAzB;AAA4BC,MAAAA,UAAU,EAAE;AAAxC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACYL,KADZ,CALJ,EAQI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEK,MAAAA,UAAU,EAAE;AAAd,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMJ,QAAQ,CAACF,eAAD,CAAd;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAEI;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAME,QAAQ,CAAC,UAAAK,SAAS;AAAA,eAAIA,SAAS,GAAG,CAAhB;AAAA,OAAV,CAAd;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,EAGI;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAML,QAAQ,CAAC,UAAAK,SAAS;AAAA,eAAIA,SAAS,GAAG,CAAhB;AAAA,OAAV,CAAd;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHJ,CARJ,EAaI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,oYAbJ,CADJ;AA0BH","sourcesContent":["import React, { useState } from \"react\";\r\nimport { ScrollView, Text } from \"react-native\";\r\n\r\nexport function UseStateScreen({ contagemInicial = 0 }) {\r\n    const [count, setCount] = useState(contagemInicial);\r\n\r\n    return (\r\n        <ScrollView>\r\n            <Text style={{ fontSize: 24, margin: 10 }}>\r\n                É usado para declarar uma variável state, o único argumento usado é o state inicial.\r\n                E ela sempre irá retornar um par de valores sendo eles o state atual e uma função para atualizar o state\r\n            </Text>\r\n            <Text style={{ fontSize: 20, padding: 5, marginLeft: 10 }}>\r\n                Count: {count}\r\n            </Text>\r\n            <Text style={{ marginLeft: 10 }}>\r\n                <button onClick={() => setCount(contagemInicial)}>Reset</button>\r\n                <button onClick={() => setCount(prevCount => prevCount - 1)}>-</button>\r\n                <button onClick={() => setCount(prevCount => prevCount + 1)}>+</button>\r\n            </Text>\r\n            <Text>\r\n                <br></br>\r\n                Use o useState caso:\r\n                A) JavaScript primitivos como estado\r\n                B) transições simples de estado\r\n                C) lógica de negócios dentro do seu componente\r\n                D) diferentes propriedades que não mudam de forma correlata e podem ser gerenciadas por ganchos de uso múltiplos\r\n                E) estado co-localizado ao seu componente\r\n                F) uma pequena aplicação (mas as linhas estão embaçadas aqui)\r\n            </Text>\r\n        </ScrollView>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}